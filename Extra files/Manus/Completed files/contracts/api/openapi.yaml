openapi: 3.0.3
info:
  title: Affiliate Matrix API
  description: API for the Affiliate Matrix automated affiliate marketing system
  version: 1.0.0
servers:
  - url: /api
    description: Base API path
paths:
  /programs:
    get:
      summary: List Programs
      description: Retrieve a paginated list of affiliate programs
      operationId: listPrograms
      tags:
        - Programs
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: sort
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [active, inactive, pending]
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: tag
          in: query
          description: Filter by tag
          schema:
            type: string
        - name: source
          in: query
          description: Filter by source
          schema:
            type: string
        - name: search
          in: query
          description: Search term for name, description, or URL
          schema:
            type: string
        - name: minCommission
          in: query
          description: Minimum commission value
          schema:
            type: number
            format: float
        - name: maxCommission
          in: query
          description: Maximum commission value
          schema:
            type: number
            format: float
        - name: minEpc
          in: query
          description: Minimum earnings per click
          schema:
            type: number
            format: float
        - name: minConversionRate
          in: query
          description: Minimum conversion rate
          schema:
            type: number
            format: float
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Program'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    post:
      summary: Create Program
      description: Create a new affiliate program
      operationId: createProgram
      tags:
        - Programs
      requestBody:
        description: Program to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramCreate'
      responses:
        '201':
          description: Program created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /programs/{id}:
    get:
      summary: Get Program
      description: Retrieve a specific program by ID
      operationId: getProgram
      tags:
        - Programs
      parameters:
        - name: id
          in: path
          description: Program ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    put:
      summary: Update Program
      description: Update an existing program
      operationId: updateProgram
      tags:
        - Programs
      parameters:
        - name: id
          in: path
          description: Program ID
          required: true
          schema:
            type: string
      requestBody:
        description: Program data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramUpdate'
      responses:
        '200':
          description: Program updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    delete:
      summary: Delete Program
      description: Delete a program
      operationId: deleteProgram
      tags:
        - Programs
      parameters:
        - name: id
          in: path
          description: Program ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Program deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /programs/{id}/metrics:
    get:
      summary: Get Program Metrics
      description: Retrieve metrics for a specific program
      operationId: getProgramMetrics
      tags:
        - Programs
      parameters:
        - name: id
          in: path
          description: Program ID
          required: true
          schema:
            type: string
        - name: period
          in: query
          description: Time period for metrics
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramMetrics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /connections:
    get:
      summary: List Connections
      description: Retrieve a paginated list of connections
      operationId: listConnections
      tags:
        - Connections
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          description: Filter by connection type
          schema:
            type: string
            enum: [aggregator, api, manual]
        - name: status
          in: query
          description: Filter by connection status
          schema:
            type: string
            enum: [connected, disconnected, error, syncing]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Connection'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    post:
      summary: Create Connection
      description: Create a new connection
      operationId: createConnection
      tags:
        - Connections
      requestBody:
        description: Connection to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionCreate'
      responses:
        '201':
          description: Connection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /connections/{id}:
    get:
      summary: Get Connection
      description: Retrieve a specific connection by ID
      operationId: getConnection
      tags:
        - Connections
      parameters:
        - name: id
          in: path
          description: Connection ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    put:
      summary: Update Connection
      description: Update an existing connection
      operationId: updateConnection
      tags:
        - Connections
      parameters:
        - name: id
          in: path
          description: Connection ID
          required: true
          schema:
            type: string
      requestBody:
        description: Connection data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionUpdate'
      responses:
        '200':
          description: Connection updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    delete:
      summary: Delete Connection
      description: Delete a connection
      operationId: deleteConnection
      tags:
        - Connections
      parameters:
        - name: id
          in: path
          description: Connection ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Connection deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /connections/{id}/sync:
    post:
      summary: Sync Connection
      description: Trigger synchronization for a connection
      operationId: syncConnection
      tags:
        - Connections
      parameters:
        - name: id
          in: path
          description: Connection ID
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Sync initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /connections/{id}/test:
    post:
      summary: Test Connection
      description: Test a connection
      operationId: testConnection
      tags:
        - Connections
      parameters:
        - name: id
          in: path
          description: Connection ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Connection tested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /discovery:
    get:
      summary: List Discovery Results
      description: Retrieve a paginated list of discovery results
      operationId: listDiscoveryResults
      tags:
        - Discovery
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [completed, in_progress, failed]
        - name: startDate
          in: query
          description: Filter by start date
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter by end date
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DiscoveryResult'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    post:
      summary: Start Discovery
      description: Start a new discovery operation
      operationId: startDiscovery
      tags:
        - Discovery
      requestBody:
        description: Discovery parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: Query for discovery
                parameters:
                  type: object
                  properties:
                    depth:
                      type: integer
                      minimum: 1
                      description: Search depth
                    maxResults:
                      type: integer
                      minimum: 1
                      description: Maximum number of results
                    filters:
                      type: object
                      description: Additional filters
      responses:
        '202':
          description: Discovery initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /discovery/{id}:
    get:
      summary: Get Discovery Result
      description: Retrieve a specific discovery result by ID
      operationId: getDiscoveryResult
      tags:
        - Discovery
      parameters:
        - name: id
          in: path
          description: Discovery result ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /discovery/{id}/cancel:
    post:
      summary: Cancel Discovery
      description: Cancel an in-progress discovery operation
      operationId: cancelDiscovery
      tags:
        - Discovery
      parameters:
        - name: id
          in: path
          description: Discovery result ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Discovery cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /discovery/{id}/items/{itemId}/process:
    post:
      summary: Process Discovery Item
      description: Process a discovery item
      operationId: processDiscoveryItem
      tags:
        - Discovery
      parameters:
        - name: id
          in: path
          description: Discovery result ID
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: Discovery item ID
          required: true
          schema:
            type: string
      requestBody:
        description: Processing action
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [add, ignore, review]
                  description: Action to take
                programDetails:
                  type: object
                  description: Program details if action is "add"
      responses:
        '200':
          description: Item processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /system/metrics:
    get:
      summary: Get System Metrics
      description: Retrieve system metrics
      operationId: getSystemMetrics
      tags:
        - System
      parameters:
        - name: period
          in: query
          description: Time period for metrics
          schema:
            type: string
            enum: [hour, day, week, month]
            default: hour
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMetrics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /system/logs:
    get:
      summary: Get System Logs
      description: Retrieve system logs
      operationId: getSystemLogs
      tags:
        - System
      parameters:
        - name: level
          in: query
          description: Filter by log level
          schema:
            type: string
            enum: [info, warning, error, debug]
        - name: component
          in: query
          description: Filter by component
          schema:
            type: string
        - name: startDate
          in: query
          description: Filter by start date
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter by end date
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Number of log entries to return
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    level:
                      type: string
                    component:
                      type: string
                    message:
                      type: string
                    details:
                      type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /system/status:
    get:
      summary: Get System Status
      description: Retrieve system status
      operationId: getSystemStatus
      tags:
        - System
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  components:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [healthy, degraded, unhealthy]
                        message:
                          type: string
                  lastChecked:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /budgets:
    get:
      summary: List Budgets
      description: Retrieve a paginated list of budgets
      operationId: listBudgets
      tags:
        - Budgets
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [active, paused, completed]
        - name: startDate
          in: query
          description: Filter by start date
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter by end date
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Budget'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    post:
      summary: Create Budget
      description: Create a new budget
      operationId: createBudget
      tags:
        - Budgets
      requestBody:
        description: Budget to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetCreate'
      responses:
        '201':
          description: Budget created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /budgets/{id}:
    get:
      summary: Get Budget
      description: Retrieve a specific budget by ID
      operationId: getBudget
      tags:
        - Budgets
      parameters:
        - name: id
          in: path
          description: Budget ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    put:
      summary: Update Budget
      description: Update an existing budget
      operationId: updateBudget
      tags:
        - Budgets
      parameters:
        - name: id
          in: path
          description: Budget ID
          required: true
          schema:
            type: string
      requestBody:
        description: Budget data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetUpdate'
      responses:
        '200':
          description: Budget updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    delete:
      summary: Delete Budget
      description: Delete a budget
      operationId: deleteBudget
      tags:
        - Budgets
      parameters:
        - name: id
          in: path
          description: Budget ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Budget deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /budgets/{id}/status:
    post:
      summary: Update Budget Status
      description: Update the status of a budget
      operationId: updateBudgetStatus
      tags:
        - Budgets
      parameters:
        - name: id
          in: path
          description: Budget ID
          required: true
          schema:
            type: string
      requestBody:
        description: New status
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [active, paused, completed]
                  description: New status
      responses:
        '200':
          description: Budget status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /automation/triggers:
    get:
      summary: List Automation Triggers
      description: Retrieve a paginated list of automation triggers
      operationId: listAutomationTriggers
      tags:
        - Automation
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          description: Filter by trigger type
          schema:
            type: string
            enum: [scheduled, event-based, threshold]
        - name: action
          in: query
          description: Filter by action
          schema:
            type: string
            enum: [discovery, sync, budget-adjustment, notification]
        - name: enabled
          in: query
          description: Filter by enabled status
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AutomationTrigger'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    post:
      summary: Create Automation Trigger
      description: Create a new automation trigger
      operationId: createAutomationTrigger
      tags:
        - Automation
      requestBody:
        description: Automation trigger to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationTriggerCreate'
      responses:
        '201':
          description: Automation trigger created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationTrigger'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /automation/triggers/{id}:
    get:
      summary: Get Automation Trigger
      description: Retrieve a specific automation trigger by ID
      operationId: getAutomationTrigger
      tags:
        - Automation
      parameters:
        - name: id
          in: path
          description: Automation trigger ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationTrigger'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    put:
      summary: Update Automation Trigger
      description: Update an existing automation trigger
      operationId: updateAutomationTrigger
      tags:
        - Automation
      parameters:
        - name: id
          in: path
          description: Automation trigger ID
          required: true
          schema:
            type: string
      requestBody:
        description: Automation trigger data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationTriggerUpdate'
      responses:
        '200':
          description: Automation trigger updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationTrigger'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    delete:
      summary: Delete Automation Trigger
      description: Delete an automation trigger
      operationId: deleteAutomationTrigger
      tags:
        - Automation
      parameters:
        - name: id
          in: path
          description: Automation trigger ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Automation trigger deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /automation/triggers/{id}/toggle:
    post:
      summary: Enable/Disable Automation Trigger
      description: Enable or disable an automation trigger
      operationId: toggleAutomationTrigger
      tags:
        - Automation
      parameters:
        - name: id
          in: path
          description: Automation trigger ID
          required: true
          schema:
            type: string
      requestBody:
        description: Enable/disable status
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enabled
              properties:
                enabled:
                  type: boolean
                  description: Whether the trigger is enabled
      responses:
        '200':
          description: Automation trigger toggled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationTrigger'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /automation/triggers/{id}/execute:
    post:
      summary: Execute Automation Trigger
      description: Manually execute an automation trigger
      operationId: executeAutomationTrigger
      tags:
        - Automation
      parameters:
        - name: id
          in: path
          description: Automation trigger ID
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Execution initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [initiated]
                  message:
                    type: string
                  executionId:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /settings:
    get:
      summary: Get User Settings
      description: Retrieve user settings
      operationId: getUserSettings
      tags:
        - Settings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    put:
      summary: Update User Settings
      description: Update user settings
      operationId: updateUserSettings
      tags:
        - Settings
      requestBody:
        description: Settings to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsUpdate'
      responses:
        '200':
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
components:
  schemas:
    Program:
      type: object
      required:
        - id
        - name
        - description
        - url
        - category
        - commission
        - cookieDuration
        - paymentFrequency
        - minimumPayout
        - paymentMethods
        - dateAdded
        - lastUpdated
        - status
        - tags
        - source
      properties:
        id:
          type: string
          description: Unique identifier for the program
        name:
          type: string
          description: Name of the affiliate program
        description:
          type: string
          description: Detailed description of the program
        url:
          type: string
          format: uri
          description: URL to the program's website or signup page
        category:
          type: array
          items:
            type: string
          description: Categories the program belongs to
        commission:
          type: object
          required:
            - type
            - value
          properties:
            type:
              type: string
              enum: [percentage, fixed, tiered]
              description: Type of commission structure
            value:
              oneOf:
                - type: number
                  description: Commission value for percentage or fixed types
                - type: object
                  additionalProperties:
                    type: number
                  description: Tiered commission structure with tier names as keys and values as commission amounts
            details:
              type: string
              description: Additional details about the commission structure
        cookieDuration:
          type: integer
          minimum: 0
          description: Cookie duration in days
        paymentFrequency:
          type: string
          enum: [weekly, biweekly, monthly, quarterly]
          description: Frequency of payments from the program
        minimumPayout:
          type: number
          minimum: 0
          description: Minimum amount required for payout
        paymentMethods:
          type: array
          items:
            type: string
          description: Available payment methods
        epc:
          type: number
          description: Earnings per click
        conversionRate:
          type: number
          description: Conversion rate percentage
        dateAdded:
          type: string
          format: date-time
          description: Date when the program was added to the system
        lastUpdated:
          type: string
          format: date-time
          description: Date when the program was last updated
        status:
          type: string
          enum: [active, inactive, pending]
          description: Current status of the program
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the program
        source:
          type: string
          description: Source of the program data (aggregator name, API, etc.)
        sourceId:
          type: string
          description: Original ID from the source
        metrics:
          $ref: '#/components/schemas/ProgramMetrics'
    ProgramCreate:
      type: object
      required:
        - name
        - description
        - url
        - category
        - commission
        - cookieDuration
        - paymentFrequency
        - minimumPayout
        - paymentMethods
        - status
        - tags
        - source
      properties:
        name:
          type: string
          description: Name of the affiliate program
        description:
          type: string
          description: Detailed description of the program
        url:
          type: string
          format: uri
          description: URL to the program's website or signup page
        category:
          type: array
          items:
            type: string
          description: Categories the program belongs to
        commission:
          type: object
          required:
            - type
            - value
          properties:
            type:
              type: string
              enum: [percentage, fixed, tiered]
              description: Type of commission structure
            value:
              oneOf:
                - type: number
                  description: Commission value for percentage or fixed types
                - type: object
                  additionalProperties:
                    type: number
                  description: Tiered commission structure with tier names as keys and values as commission amounts
            details:
              type: string
              description: Additional details about the commission structure
        cookieDuration:
          type: integer
          minimum: 0
          description: Cookie duration in days
        paymentFrequency:
          type: string
          enum: [weekly, biweekly, monthly, quarterly]
          description: Frequency of payments from the program
        minimumPayout:
          type: number
          minimum: 0
          description: Minimum amount required for payout
        paymentMethods:
          type: array
          items:
            type: string
          description: Available payment methods
        epc:
          type: number
          description: Earnings per click
        conversionRate:
          type: number
          description: Conversion rate percentage
        status:
          type: string
          enum: [active, inactive, pending]
          description: Current status of the program
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the program
        source:
          type: string
          description: Source of the program data (aggregator name, API, etc.)
        sourceId:
          type: string
          description: Original ID from the source
    ProgramUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the affiliate program
        description:
          type: string
          description: Detailed description of the program
        url:
          type: string
          format: uri
          description: URL to the program's website or signup page
        category:
          type: array
          items:
            type: string
          description: Categories the program belongs to
        commission:
          type: object
          properties:
            type:
              type: string
              enum: [percentage, fixed, tiered]
              description: Type of commission structure
            value:
              oneOf:
                - type: number
                  description: Commission value for percentage or fixed types
                - type: object
                  additionalProperties:
                    type: number
                  description: Tiered commission structure with tier names as keys and values as commission amounts
            details:
              type: string
              description: Additional details about the commission structure
        cookieDuration:
          type: integer
          minimum: 0
          description: Cookie duration in days
        paymentFrequency:
          type: string
          enum: [weekly, biweekly, monthly, quarterly]
          description: Frequency of payments from the program
        minimumPayout:
          type: number
          minimum: 0
          description: Minimum amount required for payout
        paymentMethods:
          type: array
          items:
            type: string
          description: Available payment methods
        epc:
          type: number
          description: Earnings per click
        conversionRate:
          type: number
          description: Conversion rate percentage
        status:
          type: string
          enum: [active, inactive, pending]
          description: Current status of the program
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the program
        sourceId:
          type: string
          description: Original ID from the source
    ProgramMetrics:
      type: object
      required:
        - clicks
        - conversions
        - revenue
        - roi
      properties:
        clicks:
          type: integer
          minimum: 0
          description: Number of clicks
        conversions:
          type: integer
          minimum: 0
          description: Number of conversions
        revenue:
          type: number
          minimum: 0
          description: Total revenue generated
        roi:
          type: number
          description: Return on investment
        averageOrderValue:
          type: number
          minimum: 0
          description: Average order value
        lastClickDate:
          type: string
          format: date-time
          description: Date of the last click
        lastConversionDate:
          type: string
          format: date-time
          description: Date of the last conversion
        trend:
          type: object
          properties:
            daily:
              type: number
              description: Daily trend percentage
            weekly:
              type: number
              description: Weekly trend percentage
            monthly:
              type: number
              description: Monthly trend percentage
    Connection:
      type: object
      required:
        - id
        - name
        - type
        - url
        - status
        - credentials
        - settings
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the connection
        name:
          type: string
          description: Name of the connection
        type:
          type: string
          enum: [aggregator, api, manual]
          description: Type of connection
        url:
          type: string
          format: uri
          description: URL of the connection source
        description:
          type: string
          description: Description of the connection
        status:
          $ref: '#/components/schemas/ConnectionStatus'
        credentials:
          $ref: '#/components/schemas/ApiCredentials'
        settings:
          type: object
          required:
            - refreshInterval
            - autoSync
          properties:
            refreshInterval:
              type: integer
              minimum: 0
              description: Refresh interval in minutes
            autoSync:
              type: boolean
              description: Whether to automatically sync
            filters:
              type: object
              description: Filters to apply during sync
        lastSync:
          type: string
          format: date-time
          description: Date of the last synchronization
        nextScheduledSync:
          type: string
          format: date-time
          description: Date of the next scheduled synchronization
        createdAt:
          type: string
          format: date-time
          description: Date when the connection was created
        updatedAt:
          type: string
          format: date-time
          description: Date when the connection was last updated
    ConnectionCreate:
      type: object
      required:
        - name
        - type
        - url
        - credentials
        - settings
      properties:
        name:
          type: string
          description: Name of the connection
        type:
          type: string
          enum: [aggregator, api, manual]
          description: Type of connection
        url:
          type: string
          format: uri
          description: URL of the connection source
        description:
          type: string
          description: Description of the connection
        credentials:
          $ref: '#/components/schemas/ApiCredentials'
        settings:
          type: object
          required:
            - refreshInterval
            - autoSync
          properties:
            refreshInterval:
              type: integer
              minimum: 0
              description: Refresh interval in minutes
            autoSync:
              type: boolean
              description: Whether to automatically sync
            filters:
              type: object
              description: Filters to apply during sync
    ConnectionUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the connection
        url:
          type: string
          format: uri
          description: URL of the connection source
        description:
          type: string
          description: Description of the connection
        credentials:
          $ref: '#/components/schemas/ApiCredentials'
        settings:
          type: object
          properties:
            refreshInterval:
              type: integer
              minimum: 0
              description: Refresh interval in minutes
            autoSync:
              type: boolean
              description: Whether to automatically sync
            filters:
              type: object
              description: Filters to apply during sync
    ConnectionStatus:
      type: object
      required:
        - state
        - lastChecked
      properties:
        state:
          type: string
          enum: [connected, disconnected, error, syncing]
          description: Current state of the connection
        lastChecked:
          type: string
          format: date-time
          description: Date when the connection was last checked
        message:
          type: string
          description: Status message
        errorCode:
          type: string
          description: Error code if applicable
        errorDetails:
          type: string
          description: Detailed error information
        syncProgress:
          type: number
          minimum: 0
          maximum: 100
          description: Synchronization progress percentage
    ApiCredentials:
      type: object
      properties:
        apiKey:
          type: string
          description: API key
        apiSecret:
          type: string
          description: API secret
        username:
          type: string
          description: Username for authentication
        password:
          type: string
          description: Password for authentication
        token:
          type: string
          description: Authentication token
        tokenExpiry:
          type: string
          format: date-time
          description: Token expiration date
        oauth:
          type: object
          properties:
            clientId:
              type: string
              description: OAuth client ID
            clientSecret:
              type: string
              description: OAuth client secret
            refreshToken:
              type: string
              description: OAuth refresh token
            accessToken:
              type: string
              description: OAuth access token
            expiresAt:
              type: string
              format: date-time
              description: OAuth token expiration date
    DiscoveryResult:
      type: object
      required:
        - id
        - query
        - timestamp
        - duration
        - status
        - results
        - stats
      properties:
        id:
          type: string
          description: Unique identifier for the discovery result
        query:
          type: string
          description: Query used for discovery
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the discovery operation
        duration:
          type: number
          minimum: 0
          description: Duration of the discovery operation in seconds
        status:
          type: string
          enum: [completed, in_progress, failed]
          description: Status of the discovery operation
        results:
          type: array
          items:
            $ref: '#/components/schemas/DiscoveryItem'
          description: Discovery results
        stats:
          type: object
          required:
            - totalFound
            - newPrograms
            - existingPrograms
            - potentialMatches
          properties:
            totalFound:
              type: integer
              minimum: 0
              description: Total number of items found
            newPrograms:
              type: integer
              minimum: 0
              description: Number of new programs found
            existingPrograms:
              type: integer
              minimum: 0
              description: Number of existing programs found
            potentialMatches:
              type: integer
              minimum: 0
              description: Number of potential matches found
        error:
          type: string
          description: Error message if the discovery operation failed
    DiscoveryItem:
      type: object
      required:
        - id
        - url
        - title
        - description
        - matchType
        - confidence
        - processed
        - addedToIndex
      properties:
        id:
          type: string
          description: Unique identifier for the discovery item
        url:
          type: string
          format: uri
          description: URL of the discovered item
        title:
          type: string
          description: Title of the discovered item
        description:
          type: string
          description: Description of the discovered item
        matchType:
          type: string
          enum: [exact, partial, potential]
          description: Type of match
        confidence:
          type: number
          minimum: 0
          maximum: 100
          description: Confidence score percentage
        programDetails:
          type: object
          description: Partial program details extracted from the discovery
        processed:
          type: boolean
          description: Whether the item has been processed
        addedToIndex:
          type: boolean
          description: Whether the item has been added to the index
        notes:
          type: string
          description: Additional notes about the discovery item
    SystemMetrics:
      type: object
      required:
        - timestamp
        - cpu
        - memory
        - storage
        - network
        - indexStats
        - apiStats
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the metrics
        cpu:
          type: object
          required:
            - usage
          properties:
            usage:
              type: number
              minimum: 0
              maximum: 100
              description: CPU usage percentage
            temperature:
              type: number
              description: CPU temperature in Celsius
        memory:
          type: object
          required:
            - total
            - used
            - percentage
          properties:
            total:
              type: number
              minimum: 0
              description: Total memory in MB
            used:
              type: number
              minimum: 0
              description: Used memory in MB
            percentage:
              type: number
              minimum: 0
              maximum: 100
              description: Memory usage percentage
        storage:
          type: object
          required:
            - total
            - used
            - percentage
          properties:
            total:
              type: number
              minimum: 0
              description: Total storage in MB
            used:
              type: number
              minimum: 0
              description: Used storage in MB
            percentage:
              type: number
              minimum: 0
              maximum: 100
              description: Storage usage percentage
        network:
          type: object
          required:
            - bytesIn
            - bytesOut
            - requestsPerMinute
          properties:
            bytesIn:
              type: number
              minimum: 0
              description: Bytes received
            bytesOut:
              type: number
              minimum: 0
              description: Bytes sent
            requestsPerMinute:
              type: number
              minimum: 0
              description: Requests per minute
        indexStats:
          type: object
          required:
            - totalPrograms
            - activePrograms
            - lastIndexUpdate
            - indexSize
          properties:
            totalPrograms:
              type: integer
              minimum: 0
              description: Total number of programs in the index
            activePrograms:
              type: integer
              minimum: 0
              description: Number of active programs in the index
            lastIndexUpdate:
              type: string
              format: date-time
              description: Date of the last index update
            indexSize:
              type: number
              minimum: 0
              description: Size of the index in MB
        apiStats:
          type: object
          required:
            - requestsTotal
            - requestsPerHour
            - averageResponseTime
            - errorRate
          properties:
            requestsTotal:
              type: integer
              minimum: 0
              description: Total number of API requests
            requestsPerHour:
              type: number
              minimum: 0
              description: API requests per hour
            averageResponseTime:
              type: number
              minimum: 0
              description: Average API response time in ms
            errorRate:
              type: number
              minimum: 0
              maximum: 100
              description: API error rate percentage
    Budget:
      type: object
      required:
        - id
        - name
        - totalAmount
        - currency
        - startDate
        - endDate
        - allocations
        - status
        - spentAmount
        - remainingAmount
        - performance
      properties:
        id:
          type: string
          description: Unique identifier for the budget
        name:
          type: string
          description: Name of the budget
        totalAmount:
          type: number
          minimum: 0
          description: Total budget amount
        currency:
          type: string
          description: Currency of the budget
        startDate:
          type: string
          format: date-time
          description: Start date of the budget period
        endDate:
          type: string
          format: date-time
          description: End date of the budget period
        allocations:
          type: array
          items:
            $ref: '#/components/schemas/BudgetAllocation'
          description: Budget allocations
        status:
          type: string
          enum: [active, paused, completed]
          description: Status of the budget
        spentAmount:
          type: number
          minimum: 0
          description: Amount spent from the budget
        remainingAmount:
          type: number
          minimum: 0
          description: Remaining amount in the budget
        performance:
          type: object
          required:
            - roi
            - revenue
            - profit
          properties:
            roi:
              type: number
              description: Return on investment
            revenue:
              type: number
              minimum: 0
              description: Total revenue generated
            profit:
              type: number
              description: Total profit
    BudgetCreate:
      type: object
      required:
        - name
        - totalAmount
        - currency
        - startDate
        - endDate
        - allocations
      properties:
        name:
          type: string
          description: Name of the budget
        totalAmount:
          type: number
          minimum: 0
          description: Total budget amount
        currency:
          type: string
          description: Currency of the budget
        startDate:
          type: string
          format: date-time
          description: Start date of the budget period
        endDate:
          type: string
          format: date-time
          description: End date of the budget period
        allocations:
          type: array
          items:
            $ref: '#/components/schemas/BudgetAllocationCreate'
          description: Budget allocations
    BudgetUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the budget
        totalAmount:
          type: number
          minimum: 0
          description: Total budget amount
        currency:
          type: string
          description: Currency of the budget
        startDate:
          type: string
          format: date-time
          description: Start date of the budget period
        endDate:
          type: string
          format: date-time
          description: End date of the budget period
        allocations:
          type: array
          items:
            $ref: '#/components/schemas/BudgetAllocationCreate'
          description: Budget allocations
        status:
          type: string
          enum: [active, paused, completed]
          description: Status of the budget
    BudgetAllocation:
      type: object
      required:
        - id
        - targetType
        - targetId
        - amount
        - spentAmount
        - performance
      properties:
        id:
          type: string
          description: Unique identifier for the budget allocation
        targetType:
          type: string
          enum: [program, category, tag]
          description: Type of allocation target
        targetId:
          type: string
          description: Identifier of the allocation target
        amount:
          type: number
          minimum: 0
          description: Allocated amount
        spentAmount:
          type: number
          minimum: 0
          description: Amount spent from the allocation
        performance:
          type: object
          required:
            - roi
            - revenue
            - profit
          properties:
            roi:
              type: number
              description: Return on investment
            revenue:
              type: number
              minimum: 0
              description: Total revenue generated
            profit:
              type: number
              description: Total profit
        rules:
          type: object
          properties:
            minPerformance:
              type: number
              description: Minimum performance threshold
            maxSpendPerDay:
              type: number
              minimum: 0
              description: Maximum spend per day
            pauseThreshold:
              type: number
              description: Threshold to pause allocation
    BudgetAllocationCreate:
      type: object
      required:
        - targetType
        - targetId
        - amount
      properties:
        targetType:
          type: string
          enum: [program, category, tag]
          description: Type of allocation target
        targetId:
          type: string
          description: Identifier of the allocation target
        amount:
          type: number
          minimum: 0
          description: Allocated amount
        rules:
          type: object
          properties:
            minPerformance:
              type: number
              description: Minimum performance threshold
            maxSpendPerDay:
              type: number
              minimum: 0
              description: Maximum spend per day
            pauseThreshold:
              type: number
              description: Threshold to pause allocation
    AutomationTrigger:
      type: object
      required:
        - id
        - name
        - type
        - enabled
        - action
        - parameters
      properties:
        id:
          type: string
          description: Unique identifier for the automation trigger
        name:
          type: string
          description: Name of the automation trigger
        type:
          type: string
          enum: [scheduled, event-based, threshold]
          description: Type of trigger
        enabled:
          type: boolean
          description: Whether the trigger is enabled
        action:
          type: string
          enum: [discovery, sync, budget-adjustment, notification]
          description: Action to perform when triggered
        schedule:
          type: object
          required:
            - frequency
          properties:
            frequency:
              type: string
              enum: [hourly, daily, weekly, monthly]
              description: Frequency of the schedule
            dayOfWeek:
              type: integer
              minimum: 0
              maximum: 6
              description: Day of the week (0-6, Sunday to Saturday)
            dayOfMonth:
              type: integer
              minimum: 1
              maximum: 31
              description: Day of the month (1-31)
            hour:
              type: integer
              minimum: 0
              maximum: 23
              description: Hour (0-23)
            minute:
              type: integer
              minimum: 0
              maximum: 59
              description: Minute (0-59)
        event:
          type: object
          required:
            - type
            - conditions
          properties:
            type:
              type: string
              description: Type of event
            conditions:
              type: object
              description: Conditions for the event
        threshold:
          type: object
          required:
            - metric
            - operator
            - value
          properties:
            metric:
              type: string
              description: Metric to monitor
            operator:
              type: string
              enum: [">", "<", "==", ">=", "<="]
              description: Comparison operator
            value:
              type: number
              description: Threshold value
        parameters:
          type: object
          description: Parameters for the action
        lastTriggered:
          type: string
          format: date-time
          description: Date when the trigger was last activated
        nextScheduled:
          type: string
          format: date-time
          description: Date when the trigger is next scheduled to run
    AutomationTriggerCreate:
      type: object
      required:
        - name
        - type
        - enabled
        - action
        - parameters
      properties:
        name:
          type: string
          description: Name of the automation trigger
        type:
          type: string
          enum: [scheduled, event-based, threshold]
          description: Type of trigger
        enabled:
          type: boolean
          description: Whether the trigger is enabled
        action:
          type: string
          enum: [discovery, sync, budget-adjustment, notification]
          description: Action to perform when triggered
        schedule:
          type: object
          required:
            - frequency
          properties:
            frequency:
              type: string
              enum: [hourly, daily, weekly, monthly]
              description: Frequency of the schedule
            dayOfWeek:
              type: integer
              minimum: 0
              maximum: 6
              description: Day of the week (0-6, Sunday to Saturday)
            dayOfMonth:
              type: integer
              minimum: 1
              maximum: 31
              description: Day of the month (1-31)
            hour:
              type: integer
              minimum: 0
              maximum: 23
              description: Hour (0-23)
            minute:
              type: integer
              minimum: 0
              maximum: 59
              description: Minute (0-59)
        event:
          type: object
          required:
            - type
            - conditions
          properties:
            type:
              type: string
              description: Type of event
            conditions:
              type: object
              description: Conditions for the event
        threshold:
          type: object
          required:
            - metric
            - operator
            - value
          properties:
            metric:
              type: string
              description: Metric to monitor
            operator:
              type: string
              enum: [">", "<", "==", ">=", "<="]
              description: Comparison operator
            value:
              type: number
              description: Threshold value
        parameters:
          type: object
          description: Parameters for the action
    AutomationTriggerUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the automation trigger
        enabled:
          type: boolean
          description: Whether the trigger is enabled
        action:
          type: string
          enum: [discovery, sync, budget-adjustment, notification]
          description: Action to perform when triggered
        schedule:
          type: object
          properties:
            frequency:
              type: string
              enum: [hourly, daily, weekly, monthly]
              description: Frequency of the schedule
            dayOfWeek:
              type: integer
              minimum: 0
              maximum: 6
              description: Day of the week (0-6, Sunday to Saturday)
            dayOfMonth:
              type: integer
              minimum: 1
              maximum: 31
              description: Day of the month (1-31)
            hour:
              type: integer
              minimum: 0
              maximum: 23
              description: Hour (0-23)
            minute:
              type: integer
              minimum: 0
              maximum: 59
              description: Minute (0-59)
        event:
          type: object
          properties:
            type:
              type: string
              description: Type of event
            conditions:
              type: object
              description: Conditions for the event
        threshold:
          type: object
          properties:
            metric:
              type: string
              description: Metric to monitor
            operator:
              type: string
              enum: [">", "<", "==", ">=", "<="]
              description: Comparison operator
            value:
              type: number
              description: Threshold value
        parameters:
          type: object
          description: Parameters for the action
    UserSettings:
      type: object
      required:
        - id
        - userId
        - theme
        - notifications
        - displayPreferences
      properties:
        id:
          type: string
          description: Unique identifier for the settings
        userId:
          type: string
          description: User identifier
        theme:
          type: string
          enum: [light, dark, system]
          description: UI theme preference
        notifications:
          type: object
          required:
            - email
            - browser
          properties:
            email:
              type: boolean
              description: Whether to send email notifications
            browser:
              type: boolean
              description: Whether to show browser notifications
            slack:
              type: boolean
              description: Whether to send Slack notifications
            slackWebhook:
              type: string
              description: Slack webhook URL
        displayPreferences:
          type: object
          required:
            - defaultView
            - tableColumns
            - graphLayout
            - resultsPerPage
          properties:
            defaultView:
              type: string
              enum: [table, graph]
              description: Default view type
            tableColumns:
              type: array
              items:
                type: string
              description: Visible table columns
            graphLayout:
              type: string
              enum: [force, circular, hierarchical]
              description: Graph layout type
            resultsPerPage:
              type: integer
              minimum: 1
              description: Number of results to show per page
        apiAccess:
          type: object
          required:
            - enabled
          properties:
            enabled:
              type: boolean
              description: Whether API access is enabled
            apiKey:
              type: string
              description: API key for access
            allowedIps:
              type: array
              items:
                type: string
              description: List of allowed IP addresses
    UserSettingsUpdate:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, system]
          description: UI theme preference
        notifications:
          type: object
          properties:
            email:
              type: boolean
              description: Whether to send email notifications
            browser:
              type: boolean
              description: Whether to show browser notifications
            slack:
              type: boolean
              description: Whether to send Slack notifications
            slackWebhook:
              type: string
              description: Slack webhook URL
        displayPreferences:
          type: object
          properties:
            defaultView:
              type: string
              enum: [table, graph]
              description: Default view type
            tableColumns:
              type: array
              items:
                type: string
              description: Visible table columns
            graphLayout:
              type: string
              enum: [force, circular, hierarchical]
              description: Graph layout type
            resultsPerPage:
              type: integer
              minimum: 1
              description: Number of results to show per page
        apiAccess:
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether API access is enabled
            allowedIps:
              type: array
              items:
                type: string
              description: List of allowed IP addresses
    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          description: Number of items per page
        total:
          type: integer
          minimum: 0
          description: Total number of items
        totalPages:
          type: integer
          minimum: 0
          description: Total number of pages
  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
