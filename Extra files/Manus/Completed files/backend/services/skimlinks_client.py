{
  "aggregator_choice": "Skimlinks",
  "aggregator_api_code": "# Skimlinks API: Example Python code for fetching merchants and offers\nimport requests\n\nSKIMLINKS_API_KEY = 'YOUR_API_KEY'  # Replace with your actual API key\ndef get_merchants():\n    url = 'https://api.skimlinks.com/v3/merchants'\n    headers = {'Authorization': f'Bearer {SKIMLINKS_API_KEY}'}\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    return response.json()\n\ndef get_offers(merchant_id):\n    url = f'https://api.skimlinks.com/v3/merchants/{merchant_id}/offers'\n    headers = {'Authorization': f'Bearer {SKIMLINKS_API_KEY}'}\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    return response.json()\n\n# Example usage:\n# merchants = get_merchants()\n# offers = get_offers(merchant_id='12345')",
  "aggregator_models_code": "# Pydantic models for Skimlinks API responses\nfrom pydantic import BaseModel, HttpUrl\nfrom typing import List, Optional\n\nclass Merchant(BaseModel):\n    id: str\n    name: str\n    domain: str\n    country: Optional[str]\n    commission_rate: Optional[str]\n    logo_url: Optional[HttpUrl]\n\nclass Offer(BaseModel):\n    id: str\n    merchant_id: str\n    title: str\n    description: Optional[str]\n    url: HttpUrl\n    start_date: Optional[str]\n    end_date: Optional[str]\n    commission: Optional[str]\n\nclass MerchantsResponse(BaseModel):\n    merchants: List[Merchant]\n    total: int\n\nclass OffersResponse(BaseModel):\n    offers: List[Offer]\n    total: int",
  "integration_code": "# Integration code for FastAPI service (Program/Connection)\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom .models import MerchantsResponse, OffersResponse  # Assuming these are in your models\nfrom .skimlinks_client import get_merchants, get_offers  # The API code above\n\nrouter = APIRouter()\n\n@router.get('/external/skimlinks/merchants', response_model=MerchantsResponse)\ndef fetch_skimlinks_merchants():\n    try:\n        data = get_merchants()\n        return MerchantsResponse(**data)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@router.get('/external/skimlinks/merchants/{merchant_id}/offers', response_model=OffersResponse)\ndef fetch_skimlinks_offers(merchant_id: str):\n    try:\n        data = get_offers(merchant_id)\n        return OffersResponse(**data)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n# To integrate with your existing Program/Connection services, you can map the Skimlinks merchant/offers data to your internal models as needed.",
  "execution_logs": {
    "deep_research_summary": "Skimlinks is a widely used affiliate aggregator with a free-to-join publisher program and a documented API. It provides endpoints for merchants and offers, and its data structure is suitable for integration with affiliate program directories. The API requires an API key and returns JSON data for merchants and offers, which can be mapped to internal models. (See: https://strackr.com/blog/best-affiliate-api, https://skimlinks.com/)",
    "run_code_output": "No code was executed, as the code provided is for integration and requires live API credentials."
  }
}